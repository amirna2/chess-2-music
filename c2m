#!/bin/bash

# Chess to Music Processing Pipeline
# Usage: ./chess2music-pipeline.sh <input_pgn_file>
#
# This script processes a chess PGN file through the complete pipeline:
# 1. Add EMT (Elapsed Move Time) annotations
# 2. Extract game features
# 3. Generate narrative tags
#
# Input:  game_eval.pgn (PGN with evaluations)
# Output: game_eval_emt.pgn, feat-game.json, tags-game.json

set -e  # Exit on any error

# Get the directory where this script is located
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Check if input file provided
if [ $# -eq 0 ]; then
    echo "Usage: $0 <input_pgn_file>"
    echo ""
    echo "Example: $0 Ding_vs_Gukesh_game13_eval.pgn"
    echo ""
    echo "Expected input format: *_eval.pgn (PGN with evaluations)"
    echo "Will generate:"
    echo "  - *_eval_emt.pgn (with elapsed move times)"
    echo "  - feat-*.json (extracted features)"
    echo "  - tags-*.json (narrative structure)"
    exit 1
fi

INPUT_PGN="$1"

# Validate input file exists
if [ ! -f "$INPUT_PGN" ]; then
    echo "Error: Input file '$INPUT_PGN' not found"
    exit 1
fi

# Validate input file has _eval.pgn suffix
if [[ ! "$INPUT_PGN" =~ _eval\.pgn$ ]]; then
    echo "Error: Input file should end with '_eval.pgn' for proper naming convention"
    exit 1
fi

# Extract base name for output files
BASE_NAME=$(basename "$INPUT_PGN" _eval.pgn)
if [ "$BASE_NAME" = "$(basename "$INPUT_PGN")" ]; then
    # Fallback if _eval.pgn not found
    BASE_NAME=$(basename "$INPUT_PGN" .pgn)
fi

# Define output file names
EMT_PGN="${BASE_NAME}_eval_emt.pgn"
FEATURES_JSON="feat-${BASE_NAME##*_}.json"  # Extract game number/identifier
TAGS_JSON="tags-${BASE_NAME##*_}.json"

echo "=== Chess to Music Pipeline ==="
echo "Input:     $INPUT_PGN"
echo "EMT PGN:   $EMT_PGN"
echo "Features:  $FEATURES_JSON"
echo "Tags:      $TAGS_JSON"
echo ""

# Step 1: Add EMT annotations
echo "Step 1: Adding elapsed move time annotations..."
OUTPUT=$(python3 "${SCRIPT_DIR}/thinking-time.py" --in "$INPUT_PGN" --out "$EMT_PGN" 2>&1)
EXIT_CODE=$?

echo "$OUTPUT"

if [ $EXIT_CODE -eq 0 ]; then
    # Check if the output indicates no clock times or EMT already present
    if echo "$OUTPUT" | grep -q "Cannot calculate EMT\|No annotation needed"; then
        echo "⚠ No EMT data available - continuing pipeline with original file"
        # Use original file for subsequent steps
        PROCESSING_FILE="$INPUT_PGN"
    else
        echo "✓ EMT annotations completed: $EMT_PGN"
        # Use EMT-annotated file for subsequent steps
        PROCESSING_FILE="$EMT_PGN"
    fi
else
    echo "✗ EMT annotation failed"
    exit 1
fi

# Step 2: Extract features
echo ""
echo "Step 2: Extracting game features..."
python3 "${SCRIPT_DIR}/feature_extractor.py" "$PROCESSING_FILE" --json > "$FEATURES_JSON"
if [ $? -eq 0 ]; then
    echo "✓ Feature extraction completed: $FEATURES_JSON"
else
    echo "✗ Feature extraction failed"
    exit 1
fi

# Step 3: Generate narrative tags
echo ""
echo "Step 3: Generating narrative structure..."
python3 "${SCRIPT_DIR}/tagger.py" "$FEATURES_JSON" --output "$TAGS_JSON"
if [ $? -eq 0 ]; then
    echo "✓ Narrative tagging completed: $TAGS_JSON"
else
    echo "✗ Narrative tagging failed"
    exit 1
fi

echo ""
echo "=== Pipeline Complete ==="
echo "Generated files:"
echo "  - $EMT_PGN (PGN with thinking times)"
echo "  - $FEATURES_JSON (structured game features)"
echo "  - $TAGS_JSON (narrative structure)"
echo ""

# Show brief summary of results
echo "=== Quick Summary ==="
if command -v jq >/dev/null 2>&1; then
    echo "Overall narrative: $(jq -r '.overall_narrative' "$TAGS_JSON")"
    echo "Game result: $(jq -r '.game_result' "$TAGS_JSON")"
    echo "Total moves: $(jq -r '.sections | length' "$TAGS_JSON") sections, $(jq -r '.total_plies' "$TAGS_JSON") plies"
else
    grep '"overall_narrative"' "$TAGS_JSON" | head -1
    grep '"game_result"' "$TAGS_JSON" | head -1
fi

echo ""
echo "Pipeline completed successfully!"
